service: blob-images-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: eu-central-1

  environment:
    photoTable: blob-images-photos
    photoIndex: SK-PK-idx
    dateIndex: date-index
    messageTable: blob-images-messages
    photoBucket: blob-images

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:eu-central-1:*:*"
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
        - ses:SendTemplatedEmail
        - ses:SendBulkTemplatedEmail
      Resource: "arn:aws:ses:eu-central-1:*:*"
    - Effect: Allow
      Action:
        - s3:getObject
      Resource: "arn:aws:s3:::*"

functions:
  createPhoto:
    handler: handlersPhoto/createPhoto.main
    events:
      - s3:
          bucket: blob-images
          event: s3:ObjectCreated:*
          rules:
            - prefix: protected/
          existing: true
  createGroup:
    handler: handlersGroup/createGroup.main
    events:
      - http:
          path: groups
          method: post
          cors: true
          authorizer: aws_iam
  updateGroup:
    handler: handlersGroup/updateGroup.main
    events:
      - http:
          path: groups/{id}
          method: put
          cors: true
          authorizer: aws_iam
  getGroup:
    handler: handlersGroup/getGroup.main
    events:
      - http:
          path: groups/{id}
          method: get
          cors: true
          authorizer: aws_iam
  listGroups:
    handler: handlersGroup/listGroups.main
    events:
      - http:
          path: groups
          method: get
          cors: true
          authorizer: aws_iam
  listGroupPhotos:
    handler: handlersGroup/listGroupPhotos.main
    events:
      - http:
          path: groups/{id}/photos
          method: get
          cors: true
          authorizer: aws_iam
  listGroupMembers:
    handler: handlersGroup/listMembers.main
    events:
      - http:
          path: groups/{id}/members
          method: get
          cors: true
          authorizer: aws_iam
  checkGroupMembership:
    handler: handlersGroup/getMembership.main
    events:
      - http:
          path: groups/{id}/membership
          method: get
          cors: true
          authorizer: aws_iam
  createUser:
    handler: handlersUser/createUser.main
    events:
      - http:
          path: users
          method: post
          cors: true
          authorizer: aws_iam
  getUser:
    handler: handlersUser/getUser.main
    events:
      - http:
          path: users/{id}
          method: get
          cors: true
          authorizer: aws_iam
  updateUser:
    handler: handlersUser/updateUser.main
    events:
      - http:
          path: users
          method: put
          cors: true
          authorizer: aws_iam
  getPhoto:
    handler: handlersPhoto/getPhoto.main
    events:
      - http:
          path: photos/{id}
          method: get
          cors: true
          authorizer: aws_iam
  getPhotoRating:
    handler: handlersPhotoRating/get-rating.main
    events:
      - http:
          path: photos/{id}/rating
          method: get
          cors: true
          authorizer: aws_iam
  updatePhotoRating:
    handler: handlersPhotoRating/update-rating.main
    events:
      - http:
          path: photos/{id}/rating
          method: put
          cors: true
          authorizer: aws_iam
  listPublications:
    handler: handlersPhoto/listPhotoPublications.main
    events:
      - http:
          path: publications/{id}
          method: get
          cors: true
          authorizer: aws_iam
  listPhotos:
    handler: handlersPhoto/listPhotos.main
    events:
      - http:
          path: photos
          method: get
          cors: true
          authorizer: aws_iam
  deletePhoto:
    handler: handlersPhoto/deletePhoto.main
    events:
      - http:
          path: photos/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  createAlbum:
    handler: handlersAlbum/createAlbum.main
    events:
      - http:
          path: groups/{id}/albums
          method: post
          cors: true
          authorizer: aws_iam
  listAlbums:
    handler: handlersAlbum/listAlbums.main
    events:
      - http:
          path: groups/{id}/albums
          method: get
          cors: true
          authorizer: aws_iam
  listAllAlbums:
    handler: handlersAlbum/listAllAlbums.main
    events:
      - http:
          path: albums
          method: get
          cors: true
          authorizer: aws_iam
  getAlbum:
    handler: handlersAlbum/getAlbum.main
    events:
      - http:
          path: groups/{id}/albums/{albumid}
          method: get
          cors: true
          authorizer: aws_iam
  updateAlbum:
    handler: handlersAlbum/updateAlbum.main
    events:
      - http:
          path: groups/{id}/albums/{albumid}
          method: put
          cors: true
          authorizer: aws_iam
  createAlbumPhoto:
    handler: handlersAlbum/createAlbumPhoto.main
    events:
      - http:
          path: groups/{id}/albums/{albumid}/photos
          method: post
          cors: true
          authorizer: aws_iam
  deleteAlbumPhoto:
    handler: handlersAlbum/deleteAlbumPhoto.main
    events:
      - http:
          path: groups/{id}/albums/{albumid}/photos/{photoid}
          method: delete
          cors: true
          authorizer: aws_iam
  listAlbumPhotos:
    handler: handlersAlbum/listAlbumPhotos.main
    events:
      - http:
          path: groups/{id}/albums/{albumid}/photos
          method: get
          cors: true
          authorizer: aws_iam
  sendInvite:
    handler: handlersInvite/sendInvite.main
    events:
      - http:
          path: groups/{id}/invite
          method: post
          cors: true
          authorizer: aws_iam
  publicGetInvite:
    handler: handlersInvite/publicGetInvite.main
    events:
      - http:
          path: invites/{id}
          method: get
          cors: true
          authorizer: aws_iam
  acceptInvite:
    handler: handlersInvite/acceptInvite.main
    events:
      - http:
          path: invites/{id}
          method: post
          cors: true
          authorizer: aws_iam
  dummy:
    handler: handlersPhoto/dummy.main
    events:
      - http:
          path: dummy
          method: get
          cors: true
                                                                                        
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  