service: blob-images-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: eu-central-1

  environment:
    photoTable: blob-images-photos-${self:provider.stage}
    coverIndex: cover-idx
    photoIndex: SK-PK-idx
    emailIndex: email-idx
    cognitoIndex: cog-idx
    dateIndex: date-idx
    photoBucket: ${file(./serverlessDomainConfig.js):bucket.${self:provider.stage}}
    frontend: ${file(./serverlessDomainConfig.js):frontend.${self:provider.stage}}
    webmaster: ${file(./serverlessDomainConfig.js):webmaster.${self:provider.stage}}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
      Resource: "arn:aws:dynamodb:eu-central-1:*:*"
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
        - ses:SendTemplatedEmail
        - ses:SendBulkTemplatedEmail
      Resource: "arn:aws:ses:eu-central-1:*:*"
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:DeleteObject
      Resource: "arn:aws:s3:::*"

functions:
  dbStream:
    handler: handlersDBstreams/mainStream.main
    events:
      - stream: ${file(./serverlessDomainConfig.js):dynamoStream.${self:provider.stage}}
  cognitoSync:
    handler: handlersCognito/sync.main
    # events:
      # BUG IN SERVERLESS/ CLOUDFORMATION: Do this manually instead
      # - cognitoUserPool:
      #     pool: ${file(./serverlessDomainConfig.js):dynamoStream.${self:provider.stage}}
      #     trigger: CustomMessage
      #     existing: true
  preSignup:
    handler: handlersCognito/preSignup.main